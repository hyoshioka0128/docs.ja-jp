### YamlMime:Tutorial
title: C# で整数と浮動小数点数を操作する
metadata:
  title: C# における数値 - C# の概要に関する対話型チュートリアル
  description: 数値型に関するこのチュートリアルでは、ブラウザーを使用して、対話形式で C# を学習します。 C# コードを記述し、ブラウザーで直接コードをコンパイルして実行した結果を確認します。
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: C# の分岐とループ
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: b417ba7ff340019c74b0c3430242f59d6217b07f
  ms.sourcegitcommit: f348c84443380a1959294cdf12babcb804cfa987
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/12/2019
  ms.locfileid: "73969366"
items:
- durationInMinutes: 1
  content: >
    このチュートリアルでは C# の数値型について対話形式で学習できます。ブラウザーを使用して C# を記述し、コードをコンパイルして実行した結果を確認します。 このチュートリアルには、C# の数値と算術演算に関する一連のレッスンが含まれています。 これらのレッスンでは、C# 言語の基本を説明します。
- title: 整数の演算の確認
  durationInMinutes: 4
  content: >
    対話型ウィンドウで次のコードを実行します。 **[Enter focus mode]\(フォーカス モードを入力する\)** ボタンを選択します。 次に、対話型ウィンドウで次のコード ブロックを入力し、**[実行]** を選択します。


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    環境でこれを実行している場合は、代わりに[ローカル バージョン](numbers-in-csharp-local.md)に関する指示に従ってください。


    整数を使用した基本的な算術演算の 1 つを確認しました。 `int` 型は、**整数**を表します (正の整数、または負の整数)。 加算には `+` 記号を使用します。 他の一般的な整数の算術演算には次のものがあります。


    - `-`: 減算

    - `*`: 乗算

    - `/`: 除算


    > [!TIP]

    > この対話型チュートリアルでは、対話型ウィンドウで作成したコードを変更して、自分で確認できます。 このチュートリアルでは、各ステップで実際に試すことができる例を用意しています。


    まずは、上記の各種演算を実行してみます。 3 行目を変更して、各演算を試します。 編集が終わるごとに、**[実行]** ボタンを選択します。


    減算：


    ```csharp

    int c = a - b;

    ```


    乗算：


    ```csharp

    int c = a * b;

    ```


    除算：


    ```csharp

    int c = a / b;

    ```


    好みで、同じ行で複数の算術演算を実行することもできます。


    > [!TIP]

    > C# (または何らかのプログラミング言語) について詳しく学習するに従い、コードを記述する際にミスをすることもあるでしょう。 **コンパイラ**は、そうしたエラーを発見して報告します。 エラー メッセージが出力された場合は、例のコードをよく確認して、対話型ウィンドウで修正すべきコードを見つけます。

    > こうした実習が C# コードの構造を理解するのに役立ちます。


    > [!NOTE]

    > このオンライン コーディング体験はプレビュー モードです。 問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。
- title: 演算の順序の確認
  durationInMinutes: 7
  content: >
    C# 言語は、数学で学んだ規則と同じ規則で各演算の優先順位を定義します。

    乗算と除算は、加算と減算よりも優先されます。

    対話型ウィンドウで次のコードを実行して、実際に確認しましょう。


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    出力を見ると、加算の前に乗算が実行されていることがわかります。


    演算の周りに丸かっこを追加する、または最初に実行したい演算を追加することで、演算の順序を変えることができます。


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    さまざまな演算を多数組み合わせて、他にも試してみましょう。 上記の 4 行目を次のように置き換えます。


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    整数について面白い動作をしていることに気づいたでしょうか。 結果に小数点や小数部分が含まれると予想される場合でも、整数の除算は常に整数の結果を算出します。


    この動作を確認できない場合は、次のコードを試してください。


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    もう一度 **[実行]** を選択して結果を確認します。


    > [!NOTE]

    > このオンライン コーディング体験はプレビュー モードです。 問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。
- title: 整数の有効桁数と制限の確認
  durationInMinutes: 5
  content: >
    この最後のサンプルでは、整数の除算における結果の切り捨てについて確認します。

    **modulo** 演算子 (`%` 文字) を使用して、**剰余**を得ることができます。


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    C# の整数型は算術における整数ともう 1 つ異なる点があります。それは `int` 型には最小値と最大値の制限があるということです。 対話型ウィンドウでこのコードを実行し、これらの制限を確認しましょう。


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    計算によってこれらの制限を超える値が作られると、**アンダーフロー**または**オーバーフロー**の状態になります。 計算の結果が 1 つの制限からもう 1 つの制限に折り返されているように見えます。 対話型ウィンドウに次の 2 行を追加して、例を確認します。


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    計算の結果が最小値の (負の) 整数に極めて近いことに注目してください。 これは `min + 2` と同じです。

    加算演算が許容された整数値を**オーバーフロー**しました。

    整数がオーバーフローして最大値から最小値に ”折り返され” たため、計算結果が非常に大きな負の値になっています。


    他にもさまざまな制限や有効桁数を持つ数値型があり、`int` 型がご自分のニーズと合わない場合は、そちらも使用できます。 次はその別の数値型を見ていきます。


    > [!NOTE]

    > このオンライン コーディング体験はプレビュー モードです。 問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。
- title: double 型の処理
  durationInMinutes: 5
  content: >
    `double` 数値型は、倍精度浮動小数点数を表します。 こうした用語を初めて見た人もいるかもしれません。 **浮動小数点**数は、非常に大きな、または非常に小さな、整数ではない数値を表すのに役立ちます。 **倍精度**は、そうした数値が**単精度**よりも大きな有効桁数を使用して格納されることを意味しています。 最近のコンピューターでは、単精度よりも倍精度の数値を使用する方が一般的です。

    確認してみましょう。 対話型ウィンドウで次のコードを実行して結果を確認します。


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    計算結果に商の小数部分が含まれていることに注目してください。 double 型を使用して、もう少し複雑な式を試します。


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    double 値は整数値よりも範囲が大きくなります。 対話型ウィンドウで次のコードを実行します。


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    これらの値は指数表記で出力されます。 `E` の左側は有効数字です。 右側の数値は指数であり、10 の累乗です。


    算術における 10 進数と同じように、C# における double には丸め誤差が発生することがあります。 次のコードを試してみましょう。


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    `0.3` の循環小数は `1/3` と完全に同じではありません。


    ***課題***


    `double` 型を使用して、大きい値や小さい値、乗算、除算などの計算してみましょう。  もっと複雑な計算を試してみてください。


    > [!NOTE]

    > このオンライン コーディング体験はプレビュー モードです。 問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。
- title: 固定小数点型の処理
  durationInMinutes: 8
  content: >
    C# の基本的な数値型である整数と double について見てきました。  もう 1 つ知っておくべき型として、`decimal` 型があります。 `decimal` 型は、`double` 型よりも範囲は小さいですが、有効桁数が大きい型です。 **固定小数点**という用語は、小数点 (またはバイナリの小数点) が動かないことを意味しています。 では、始めましょう。


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    `double` 型よりも範囲が小さいことに注目してください。 次のコードを実行すると、decimal 型では有効桁数がより大きいことを確認できます。


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    数値の末尾の `M` は、定数では `decimal` 型を使用する必要があることを示しています。


    decimal 型を使用した演算では、小数点の右側の桁数がより多いことに注目してください。


    ***課題***


    さまざまな数値型を確認したので、次は半径が 2.50 センチメートルの円の面積を計算するコードを記述してみます。 円の面積は、半径の 2 乗 x 円周率です。 ヒント: .NET には <xref:System.Math.PI?displayProperty=nameWithType> という円周率の定数があり、その値を使用できます。


    > [!NOTE]

    > このオンライン コーディング体験はプレビュー モードです。 問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。


    答えは 19 と 20 の間になるはずです。
- title: 課題完了
  durationInMinutes: 1
  content: >
    コードは次のようになりましたか?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    お好みで他の数式を試してみてください。


    > [!NOTE]

    > このオンライン コーディング体験はプレビュー モードです。 問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。
- content: >-
    これで "C# の数値" に関する対話型チュートリアルは終了です。 下の**分岐とループ**のリンクを選択することで次の対話式チュートリアルを開始することができます。また、[.NET サイト](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro)にアクセスして .NET Core SDK をダウンロードし、ご利用のマシン上でプロジェクトを作成し、コーディングを続けることもできます。 "次の手順" セクションでは、これらのチュートリアルに戻ります。


    C# の数値の詳細については、次のトピックで学習できます。


    - [整数数値型](../../language-reference/builtin-types/integral-numeric-types.md)

    - [浮動小数点数値型](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [組み込みの数値変換](../../language-reference/builtin-types/numeric-conversions.md)
